//
//  HeavyPdWrapper.hpp
//  HeavyPD-FMOD-Wrapper
//
//  Created by Jonas FÃ¼llemann on 09.09.2024.
//

#ifndef HeavyPdWrapper_hpp
#define HeavyPdWrapper_hpp

#include <stdio.h>
#include "fmod.hpp"
#include <vector>
#include <map>
#include <memory>
#include <unordered_map>
#include "Heavy_@PLUGIN_NAME@.hpp"

#define DYN_HV_CONTEXT Heavy_@PLUGIN_NAME@

#define MAX_CHANS 12

class HeavyPdWrapper
{
public:
    std::vector<std::unique_ptr<DYN_HV_CONTEXT>> context;
    bool isInstrument;
    FMOD_BOOL inputsIdle = 0;
    FMOD_BOOL lastIdleState = 0;
    bool shouldGoIdle = false;
    size_t timeStore = 0;
    float tailLength = 0;
    int sampleRate;
    float sampleRateConversionFactor;
    
    bool multiChannelExpandable;
    float* deInterleaveBuffer;
    float* interleaveBuffer;
    size_t lastChannelCount = -1;
    
    HeavyPdWrapper();
    ~HeavyPdWrapper();
    void Init();
};

namespace RNBOFMODHelpers {

bool CheckIfOutputQuiet(float* outarray,size_t buffsize, size_t numchans);
    
FMOD_SPEAKERMODE GetSpeakermode(const int channels);

void Dispatch3DAttributes(DYN_HV_CONTEXT *obj, void* rawData, uint32_t attributeMap);

enum AttributeTypes
{
    rel_pos = 0,
    rel_vel,
    rel_forw,
    rel_up,
    abs_pos,
    abs_vel,
    abs_forw,
    abs_up,
    NUM_3D_ATTRIBUTES
};

const std::unordered_map<const char*, AttributeTypes> stringToAttribute = {
    {"rel_pos", rel_pos},
    {"rel_vel", rel_vel},
    {"rel_forw", rel_forw},
    {"rel_up", rel_up},
    {"abs_pos", abs_pos},
    {"abs_vel", abs_vel},
    {"abs_forw", abs_forw},
    {"abs_up", abs_up}
};

}

#endif /* HeavyPdWrapper_hpp */
